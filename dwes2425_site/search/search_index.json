{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"M\u00f3dulo Desarrollo Web en Entorno Servidor","text":"<p>Materiales para el M\u00f3dulo Desarrollo de Aplicaciones Web Entorno Servidor.</p> <ul> <li>2\u00ba DAW. IES Francisco de los R\u00edos.</li> <li>Curso 2024/25</li> </ul> <p>El m\u00f3dulo se desarrollar\u00e1 a trav\u00e9s de las diferentes p\u00e1ginas estructuradas en carpetas.</p>"},{"location":"chuleta_mkdocs_quitarExtension/","title":"chuleta mkdocs quitarExtension","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"chuleta_mkdocs_quitarExtension/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"chuleta_mkdocs_quitarExtension/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Icon</p> <p>Probando los amonitions</p> <p>Note</p> <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n</code></pre>"},{"location":"chuleta_mkdocs_quitarExtension/#titulo-3-probando-imagenes","title":"Titulo 3 probando im\u00e1genes","text":"<p>Ve a la p\u00e1gina See my UD1 page for details.</p> <p>Probando</p> <p>Hola esto es una nota</p> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"chuleta_mkdocs_quitarExtension/#ahora-aqui-viene-un-titulo","title":"Ahora aqu\u00ed viene un t\u00edtulo","text":"<p>Segunda nota</p> <p>Alert</p> <p><code>&lt;p&gt;</code>Lorem ipsum dolor sit amet. Nam odit perspiciatis eos consequatur quos ea sint architecto et quia nihil? Sed dolores labore est voluptatem rerum eum architecto repellendus. Aut vero nostrum At voluptatibus voluptatem et odit expedita est enim omnis est provident officiis ad tempore distinctio aut dolorem velit. <code>&lt;/p&gt;&lt;p&gt;</code>Quo iste voluptatum qui dicta amet in quia quasi! Eum numquam omnis eos quos veniam sit fugiat inventore et saepe totam. Qui adipisci cumque sed nihil corporis libero ad delectus obcaecati 33 sequi rerum sit Quis tempore ex nihil omnis est reprehenderit vitae? Ab laudantium beatae vel rerum animi At optio modi. <code>&lt;/p&gt;</code></p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"chuleta_mkdocs_quitarExtension/#ahora-aqui-viene-un-titulo_1","title":"Ahora aqu\u00ed viene un t\u00edtulo","text":"<p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"chuleta_mkdocs_quitarExtension/#success","title":"Success","text":"<p>Lorem ipsum dolor sit amet, consectet</p> <p>asdad</p> <p>adasd</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>asdasd</p>"},{"location":"chuleta_mkdocs_quitarExtension/#nota-que-se-expande","title":"nota que se expande","text":"Se expande nota <p>Criterios de Evaluaci\u00f3n</p> <ul> <li>A</li> </ul> <p>Se han caractesdf</p> <p>rizasd</p> <p>asdasd</p> <ul> <li>A Se han caracteriz</li> </ul> <p>Una de las arquitecturas de software m\u00e1s utilizadas en inform\u00e1tica es la llamada arquitectura cliente / servidor . En este tipo de arquitectura hay una aplicaci\u00f3n que hace peticiones (el cliente ) y otra aplicaci\u00f3n que est\u00e1 a la espera de recibir esas peticiones y, cuando las recibe, procesarlas y responder (el servidor ).</p> <ul> <li>A Se han caracteriz</li> </ul>"},{"location":"0_Inicio/1_Presentaci%C3%B3n/","title":"1 Presentaci\u00f3n","text":""},{"location":"0_Inicio/1_Presentaci%C3%B3n/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"0_Inicio/1_Presentaci%C3%B3n/#1-presentacion-del-modulo-dwes-curso-2425","title":"1 Presentaci\u00f3n del M\u00f3dulo DWES Curso 24/25","text":"<ul> <li>Diapositivas presentaci\u00f3n del m\u00f3dulo</li> </ul>"},{"location":"0_Inicio/1_Presentaci%C3%B3n/#2-resultado-de-aprendizaje","title":"2 Resultado de Aprendizaje","text":"<p>El desarrollo del m\u00f3dulo est\u00e1 basado en el Real Decreto 686/2010, de 20 de mayo, por el que se establece el t\u00edtulo de T\u00e9cnico Superior en Desarrollo de Aplicaciones Web y se fijan sus ense\u00f1anzas m\u00ednimas y en la Orden de 16 de junio de 2011, por la que se desarrolla el curr\u00edculo correspondiente al t\u00edtulo de T\u00e9cnico Superior en Desarrollo de Aplicaciones Weborden de (enlace)</p> RA1 Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias <p>Criterios de Evaluaci\u00f3n</p> <ul> <li>A Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>B Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>C Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>D Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>E Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>F Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>G Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul> RA2 Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. <ul> <li>A Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>B Se han identificado las principales tecnolog\u00edas asociadas.</li> <li>C Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>D Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>E Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>F Se han utilizado directivas para modificar el comportamiento predeterminado.</li> <li>G Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>H Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ul> RA3 Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.\u00a0 <ul> <li>A Se han utilizado mecanismos dedecisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>B Se han utilizadobucles y se ha verificado su funcionamiento.</li> <li>C Se han utilizado \u00abarrays\u00bb para almacenar y recuperar conjuntos de datos.</li> <li>D Se han creado y utilizadofunciones.</li> <li>E Se han utilizadoformularios Web para interactuar con el usuario del navegador Web.</li> <li>F Se han empleado m\u00e9todos pararecuperar la informaci\u00f3n introducida en el formulario.</li> <li>G Se han a\u00f1adidocomentarios al c\u00f3digo</li> </ul> RA4 Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.\u00a0 <ul> <li>A Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente Web concreto y se han se\u00f1alado sus ventajas.</li> <li>B Se han utilizadosesiones para mantener el estado de las aplicaciones Web.</li> <li>C Se han utilizado \u00abcookies\u00bb para almacenar informaci\u00f3n en el cliente Web y para recuperar su contenido.</li> <li>D Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios.</li> <li>E Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.</li> <li>F Se han realizado adaptaciones a aplicaciones Web existentes como gestores de contenidos u otras.</li> <li>G Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo.</li> </ul> RA5 Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.\u00a0 <ul> <li>A Se han identificado las ventajas de separar la l\u00f3gica de negocio de los aspectos de presentaci\u00f3n de la aplicaci\u00f3n.</li> <li>B Se han analizado tecnolog\u00edas y mecanismos que permiten realizar esta separaci\u00f3n y sus caracter\u00edsticas principales.</li> <li>C Se han utilizado objetos y controles en el servidor para generar el aspecto visual de la aplicaci\u00f3n Web en el cliente.</li> <li>D Se han utilizado formularios generados de forma din\u00e1mica para responder a los eventos de la aplicaci\u00f3n Web.</li> <li>E Se han identificado y aplicado los par\u00e1metros relativos a la configuraci\u00f3n de la aplicaci\u00f3n Web.</li> <li>F Se han escrito aplicaciones Web con mantenimiento de estado y separaci\u00f3n de la l\u00f3gica de negocio.</li> <li>G Se han aplicado los principios de la programaci\u00f3n orientada a objetos.</li> <li>H Se haprobado y documentado el c\u00f3digo.</li> </ul> RA6 Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. <ul> <li>A Se han analizado las tecnolog\u00edas que permiten el acceso mediante programaci\u00f3n a la informaci\u00f3n disponible en almacenes de datos.</li> <li>B Se han creado aplicaciones que establezcan conexiones con bases de datos.</li> <li>C Se ha recuperado informaci\u00f3n almacenada en bases de datos.</li> <li>D Se ha publicado en aplicaciones Web la informaci\u00f3n recuperada.</li> <li>E Se han utilizado conjuntos de datos para almacenar la informaci\u00f3n.</li> <li>F Se han creado aplicaciones Web que permitan la actualizaci\u00f3n y la eliminaci\u00f3n de informaci\u00f3n disponible en una base de datos.</li> <li>G Se han utilizado transacciones para mantener la consistencia de la informaci\u00f3n.</li> <li>H Se han probado y documentado las aplicaciones.</li> </ul> RA7 Desarrolla servicios Web analizando su funcionamiento e implantando la estructura de sus componentes <ul> <li>A Se han reconocido las caracter\u00edsticas propias y el \u00e1mbito de aplicaci\u00f3n de los servicios Web.</li> <li>B Se han reconocido las ventajas de utilizar servicios Web para proporcionar acceso a funcionalidades incorporadas a la l\u00f3gica de negocio de una aplicaci\u00f3n.</li> <li>C Se han identificado las tecnolog\u00edas y los protocolos implicados en la publicaci\u00f3n y utilizaci\u00f3n de servicios Web.</li> <li>D Se ha programado un servicio Web.</li> <li>E Se ha creado el documento de descripci\u00f3n del servicio Web.</li> <li>F Se ha verificado el funcionamiento del servicio Web.</li> <li>G Se ha consumido el servicio Web.</li> </ul> RA8 Genera p\u00e1ginas Web din\u00e1micas analizando y utilizando tecnolog\u00edas del servidor Web que a\u00f1adan c\u00f3digo al lenguaje de marcas. <ul> <li>A Se han identificado las diferencias entre la ejecuci\u00f3n de c\u00f3digo en elservidor y en el cliente Web.</li> <li>B Se han reconocido lasventajas de unir ambas tecnolog\u00edas en el proceso de desarrollo de programas.</li> <li>C Se han identificado las librer\u00edas y las tecnolog\u00edas relacionadas con la generaci\u00f3n por parte del servidor de p\u00e1ginas Web con guiones embebidos.</li> <li>D Se han utilizado estas tecnolog\u00edas para generar p\u00e1ginas Web que incluyan interacci\u00f3n con el usuario en forma de advertencias y peticiones de confirmaci\u00f3n.</li> <li>E Se han utilizado estas tecnolog\u00edas, para generar p\u00e1ginas Web que incluyan verificaci\u00f3n de formularios.</li> <li>F Se han utilizado estas tecnolog\u00edas para generar p\u00e1ginas Web que incluyan modificaci\u00f3n din\u00e1mica de su contenido y su estructura.</li> <li>G Se han aplicado estas tecnolog\u00edas en la programaci\u00f3n de aplicaciones Web.</li> </ul> RA9 Desarrolla aplicaciones Web h\u00edbridas seleccionando y utilizando librer\u00edas de c\u00f3digo y repositorios heterog\u00e9neos de informaci\u00f3n <ul> <li>A Se han reconocido las ventajas que proporciona la reutilizaci\u00f3n de c\u00f3digo y el aprovechamiento de informaci\u00f3n ya existente.</li> <li>B Se han identificado librer\u00edas de c\u00f3digo y tecnolog\u00edas aplicables en la creaci\u00f3n de aplicaciones Web h\u00edbridas.</li> <li>C Se ha creado una aplicaci\u00f3n Web que recupere y procese repositorios de informaci\u00f3n ya existentes.</li> <li>D Se han creado repositorios espec\u00edficos a partir de informaci\u00f3n existente en Internet y en almacenes de informaci\u00f3n.</li> <li>E Se han utilizado librer\u00edas de c\u00f3digo para incorporar funcionalidades espec\u00edficas a una aplicaci\u00f3n Web.</li> <li>F Se han programado servicios y aplicaciones Web utilizando como base informaci\u00f3n y c\u00f3digo generados por terceros.</li> <li>G Se han probado, depurado y documentado las aplicaciones generadas.</li> </ul>"},{"location":"0_Inicio/1_Presentaci%C3%B3n/#calificaciones","title":"Calificaciones","text":"<p>La calificaci\u00f3n final del curso ser\u00e1 la suma ponderada de las diferentes calificaciones en cada Unidad, que tendr\u00e1n un Resultado de Aprendizaje a excepci\u00f3n de la unidad 2: El lenguaje PHP  que tiene los resultados de aprendizaje 2 y 3</p> RA UNIDAD PESO 1 UD1-Arquitecturas Web 5 2-3 UD2-Lenguage PHP 15 4 UD3 - PHP POO 10 5 UD4- Acceso a Datos 10 6 UD5- Programaci\u00f3n Web y Herramientas 10 7 UD6- Framework Laravel 20 8 UD7- Aplicaciones Web Din\u00e1micas (REST) 15 9 UD8-H\u00edbridas 15"},{"location":"0_Inicio/1_Presentaci%C3%B3n/#codigo-de-conducta","title":"C\u00f3digo de Conducta","text":""},{"location":"0_Inicio/1_Presentaci%C3%B3n/#codigo-limpio","title":"C\u00f3digo L\u00edmpio","text":"<p>Vamos a seguir la filosof\u00eda del famoso libro CLEAN Code, del que os comparto el resumen de</p> <ul> <li>Art\u00edculo: https://adictosaltrabajo.com/2020/03/31/resumen-clean-code/</li> <li>PDF: https://adictosaltrabajo.com/wp-content/uploads/2020/03/CLEAN-CODE.pdf</li> </ul> <p>tambi\u00e9n est\u00e1 el PDF adjunto en la carpeta assets y alg\u00fan tutorial de Youtube</p> <p>El recurso PDF Libro</p>"},{"location":"0_Inicio/1_Presentaci%C3%B3n/#objetivos-semanales","title":"Objetivos semanales","text":""},{"location":"0_Inicio/Enlaces%20y%20recursos%20del%20m%C3%B3dulo/","title":"Enlaces y recursos del m\u00f3dulo","text":""},{"location":"0_Inicio/Enlaces%20y%20recursos%20del%20m%C3%B3dulo/#objetivos","title":"Objetivos","text":"<p>En la carpeta compartida iremos subiendo las diferentes presentaciones con los objetivos de cada tema</p>"},{"location":"0_Inicio/Enlaces%20y%20recursos%20del%20m%C3%B3dulo/#carpeta-google-drive-compartida","title":"Carpeta Google Drive Compartida","text":"<p>Aqu\u00ed pondremos todas las diapositivas, archivos compartidos, presentaciones del m\u00f3dulo</p> <ul> <li>Enlace a Hoja de c\u00e1lculo compartida para el seguimiento de la asignatua</li> <li>Enlace a carpeta compartida.</li> <li>Enlace a Pizarra Compartida</li> </ul>"},{"location":"0_Inicio/Enlaces%20y%20recursos%20del%20m%C3%B3dulo/#seguimiento","title":"Seguimiento:","text":"<p>`</p> <p>`</p> <p>Ejemplo:</p> <p>https://www.youtube.com/watch?v=a209xT12Njg</p> <p><code>&lt;h1&gt;tesxt&lt;/h1&gt;</code> http://www.limni.net</p>"},{"location":"0_Inicio/test_inicial/","title":"Test inicial","text":"<p>Test de evaluaci\u00f3n inicial.</p> <p>Enlace:</p> <p>https://forms.gle/PAtMxcowQxg2b2CE7</p> Cargando\u2026"},{"location":"1%20arquitecturas-sem1/Entregable/","title":"UD1- Entregable Semana 1","text":"<p>Los ejercicios que se han de subir al repositorio Github y enlace al aula Moodle ser\u00e1n:</p> <ol> <li>Repositorio Github con el profesor como invitado.Diferentes pruebas realizadas en clase de las diferentes caracter\u00edsticas del lenguaje</li> <li>Enlace a Infograf\u00eda en Canva, Genially etc de realizaci\u00f3n propia recabando informaci\u00f3n y conclusiones del tema.</li> <li>Video-presentaci\u00f3n presentando la infograf\u00eda anterior, m\u00e1ximo 5 minutos.</li> </ol> <p>Entregable</p> <p>Se ha de entregar en el tiempo estimado en Moodle</p> <p>Enlace a Moodle Centros</p>"},{"location":"1%20arquitecturas-sem1/UD1_2/","title":"UD1 2","text":"<p>Aqu\u00ed tienes una introducci\u00f3n a las arquitecturas web y a los lenguajes m\u00e1s utilizados, escrita en Markdown.</p>"},{"location":"1%20arquitecturas-sem1/UD1_2/#introduccion-a-las-arquitecturas-web-y-lenguajes-de-programacion","title":"Introducci\u00f3n a las Arquitecturas Web y Lenguajes de Programaci\u00f3n","text":""},{"location":"1%20arquitecturas-sem1/UD1_2/#que-es-una-arquitectura-web","title":"\u00bfQu\u00e9 es una Arquitectura Web?","text":"<p>Una arquitectura web se refiere a la estructura general y los componentes que interact\u00faan en un sistema web. Esta incluye el dise\u00f1o de la infraestructura, la comunicaci\u00f3n entre servidores y clientes, y la manera en que se gestionan los datos y la l\u00f3gica de la aplicaci\u00f3n.</p> <p>Las arquitecturas web m\u00e1s comunes son:</p> <ul> <li>Monol\u00edtica: En esta arquitectura, todos los componentes de la aplicaci\u00f3n est\u00e1n integrados en un \u00fanico c\u00f3digo base. Es simple de desarrollar pero puede ser dif\u00edcil de escalar y mantener.</li> <li>Cliente-Servidor: El cliente (generalmente un navegador web) interact\u00faa con el servidor que procesa las solicitudes y devuelve respuestas. Es un modelo cl\u00e1sico en la web.</li> <li>Arquitectura de Tres Capas (3-tier): Se divide en capa de presentaci\u00f3n (front-end), capa l\u00f3gica (back-end), y capa de datos (base de datos). Esto separa la l\u00f3gica de negocio y la presentaci\u00f3n, facilitando el mantenimiento y la escalabilidad.</li> <li>Microservicios: Cada funci\u00f3n de la aplicaci\u00f3n se desarrolla como un servicio independiente que puede escalar y desplegarse por separado. Es popular en sistemas modernos por su flexibilidad y escalabilidad.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD1_2/#ejemplo-de-arquitectura-de-tres-capas","title":"Ejemplo de Arquitectura de Tres Capas","text":"<ol> <li>Capa de Presentaci\u00f3n (Front-End): Desarrollada con HTML, CSS, y JavaScript.</li> <li>Capa L\u00f3gica (Back-End): Implementada en lenguajes como Python o Java.</li> <li>Capa de Datos: Uso de bases de datos como MySQL o MongoDB.</li> </ol>"},{"location":"1%20arquitecturas-sem1/UD1_2/#lenguajes-de-programacion-mas-usados-en-el-desarrollo-web","title":"Lenguajes de Programaci\u00f3n M\u00e1s Usados en el Desarrollo Web","text":""},{"location":"1%20arquitecturas-sem1/UD1_2/#front-end","title":"Front-End","text":"<ul> <li>HTML: Lenguaje de marcado que estructura el contenido de la web.</li> <li>CSS: Lenguaje que define el estilo y la apariencia de la web.</li> <li>JavaScript: Lenguaje de scripting que permite la interacci\u00f3n din\u00e1mica en las p\u00e1ginas web.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD1_2/#ejemplo","title":"Ejemplo","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Mi P\u00e1gina Web&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; background-color: #f4f4f4; }\n        h1 { color: #333; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u00a1Hola, Mundo!&lt;/h1&gt;\n    &lt;p&gt;Bienvenidos a mi p\u00e1gina web.&lt;/p&gt;\n    &lt;button onclick=\"saludar()\"&gt;Haz clic aqu\u00ed&lt;/button&gt;\n    &lt;script&gt;\n        function saludar() {\n            alert('\u00a1Hola desde JavaScript!');\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"1%20arquitecturas-sem1/UD1_2/#back-end","title":"Back-End","text":"<ul> <li>Python: Usado con frameworks como Django y Flask.</li> <li>Java: Utilizado en aplicaciones empresariales con Spring.</li> <li>JavaScript: Con Node.js, permite usar JavaScript en el servidor.</li> <li>Ruby: Frameworks como Ruby on Rails hacen este lenguaje popular en el desarrollo web.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD1_2/#ejemplo-en-python-con-flask","title":"Ejemplo en Python (con Flask)","text":"<pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"1%20arquitecturas-sem1/UD1_2/#bases-de-datos","title":"Bases de Datos","text":"<ul> <li>MySQL: Base de datos relacional, ampliamente utilizada.</li> <li>PostgreSQL: Otra base de datos relacional con caracter\u00edsticas avanzadas.</li> <li>MongoDB: Base de datos NoSQL, orientada a documentos.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD1_2/#ejemplo-de-consulta-sql","title":"Ejemplo de Consulta SQL","text":"<pre><code>SELECT * FROM usuarios WHERE activo = 1;\n</code></pre>"},{"location":"1%20arquitecturas-sem1/UD1_2/#referencias","title":"Referencias","text":"<ol> <li>\"The Architecture of Open Source Applications\" - aosabook.org</li> <li>\"Flask Documentation\" - flask.palletsprojects.com</li> <li>\"JavaScript Info\" - javascript.info</li> </ol> <p>Este documento proporciona una base para entender las arquitecturas web y los lenguajes clave en el desarrollo de aplicaciones web, con ejemplos que muestran c\u00f3mo se pueden implementar estas tecnolog\u00edas en la pr\u00e1ctica.</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/","title":"UD1 3","text":""},{"location":"1%20arquitecturas-sem1/UD1_3/#introduccion-a-las-arquitecturas-web-y-lenguajes-de-programacion","title":"Introducci\u00f3n a las Arquitecturas Web y Lenguajes de Programaci\u00f3n","text":"<p>Las arquitecturas web son el conjunto de tecnolog\u00edas, protocolos y patrones de dise\u00f1o que permiten la creaci\u00f3n y mantenimiento de aplicaciones web. Una aplicaci\u00f3n web t\u00edpica est\u00e1 dividida en frontend (lo que el usuario ve e interact\u00faa) y backend (donde se maneja la l\u00f3gica del negocio, base de datos, y procesamiento de datos).</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#1-arquitectura-web","title":"1. Arquitectura Web","text":""},{"location":"1%20arquitecturas-sem1/UD1_3/#11-modelo-cliente-servidor","title":"1.1. Modelo Cliente-Servidor","text":"<p>La arquitectura m\u00e1s com\u00fan en el desarrollo web es la arquitectura cliente-servidor. En este modelo, el cliente (navegador web) realiza solicitudes HTTP al servidor web, que procesa estas solicitudes, ejecuta la l\u00f3gica del negocio, consulta bases de datos si es necesario, y devuelve una respuesta (generalmente en formato HTML, JSON, XML, etc.).</p> <p></p> <p>Fuente: Wikipedia</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#12-modelo-de-capas","title":"1.2. Modelo de Capas","text":"<p>Otra arquitectura com\u00fan es el modelo de capas, que organiza la aplicaci\u00f3n en capas jer\u00e1rquicas:</p> <ul> <li>Capa de presentaci\u00f3n (Frontend): Encargada de la interfaz de usuario. Utiliza tecnolog\u00edas como HTML, CSS y JavaScript.</li> <li>Capa de l\u00f3gica del negocio (Backend): Contiene la l\u00f3gica de la aplicaci\u00f3n, gestionada por lenguajes de programaci\u00f3n como PHP, Python, Ruby, etc.</li> <li>Capa de acceso a datos: Responsable de interactuar con la base de datos. Se utilizan SQL o sistemas ORM (Object-Relational Mapping).</li> </ul> <p>Cada capa interact\u00faa con la siguiente, permitiendo modularidad y mantenimiento m\u00e1s sencillo.</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#13-arquitectura-monolitica-vs-microservicios","title":"1.3. Arquitectura Monol\u00edtica vs. Microservicios","text":"<ul> <li>Monol\u00edtica: La aplicaci\u00f3n es una \u00fanica unidad. Todas las funcionalidades est\u00e1n empaquetadas juntas. Este modelo es m\u00e1s f\u00e1cil de desarrollar pero puede ser m\u00e1s dif\u00edcil de escalar y mantener.</li> <li>Microservicios: La aplicaci\u00f3n se divide en peque\u00f1os servicios independientes que se comunican entre s\u00ed. Este modelo ofrece mejor escalabilidad y mantenimiento, pero es m\u00e1s complejo de implementar.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD1_3/#2-lenguajes-de-programacion-usados-en-el-desarrollo-web","title":"2. Lenguajes de Programaci\u00f3n Usados en el Desarrollo Web","text":""},{"location":"1%20arquitecturas-sem1/UD1_3/#21-php","title":"2.1. PHP","text":"<p>PHP es un lenguaje de scripting del lado del servidor ampliamente utilizado para el desarrollo web. Fue creado en 1994 y es conocido por su facilidad de uso y su capacidad para generar p\u00e1ginas web din\u00e1micas.</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#ejemplo-basico-en-php","title":"Ejemplo B\u00e1sico en PHP","text":"<pre><code>&lt;?php\necho \"Hola, mundo!\";\n?&gt;\n</code></pre> <p>Cuando un servidor web ejecuta este c\u00f3digo, enviar\u00e1 al cliente un simple texto \"Hola, mundo!\".</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#22-javascript","title":"2.2. JavaScript","text":"<p>JavaScript es el lenguaje del lado del cliente m\u00e1s popular. Se ejecuta en el navegador del usuario y se utiliza para crear interacciones din\u00e1micas en la p\u00e1gina web. Tambi\u00e9n puede usarse en el backend con tecnolog\u00edas como Node.js.</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#ejemplo-basico-en-javascript","title":"Ejemplo B\u00e1sico en JavaScript","text":"<pre><code>document.getElementById(\"mensaje\").innerHTML = \"\u00a1Hola desde JavaScript!\";\n</code></pre> <p>Este c\u00f3digo busca un elemento con el ID <code>mensaje</code> y cambia su contenido a \"\u00a1Hola desde JavaScript!\".</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#23-python","title":"2.3. Python","text":"<p>Python es un lenguaje de prop\u00f3sito general que tambi\u00e9n se utiliza en el desarrollo web, especialmente en el backend con frameworks como Django o Flask.</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#ejemplo-basico-en-python-con-flask","title":"Ejemplo B\u00e1sico en Python (con Flask)","text":"<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"\u00a1Hola desde Flask!\"\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Este c\u00f3digo crea una peque\u00f1a aplicaci\u00f3n web que devuelve \"\u00a1Hola desde Flask!\" cuando se accede a la ruta ra\u00edz (<code>/</code>).</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#24-otros-lenguajes","title":"2.4. Otros Lenguajes","text":"<ul> <li>Ruby: Usado con el framework Rails, conocido por su simplicidad y velocidad de desarrollo.</li> <li>Java: Utilizado en grandes aplicaciones empresariales, a menudo con el framework Spring.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD1_3/#3-conclusion","title":"3. Conclusi\u00f3n","text":"<p>Las arquitecturas web han evolucionado desde modelos simples de cliente-servidor a estructuras m\u00e1s complejas como microservicios. Los lenguajes de programaci\u00f3n como PHP, JavaScript, y Python han desempe\u00f1ado un papel crucial en este desarrollo, permitiendo a los desarrolladores construir aplicaciones din\u00e1micas, escalables y mantenibles.</p>"},{"location":"1%20arquitecturas-sem1/UD1_3/#4-referencias","title":"4. Referencias","text":"<ol> <li>Client-server model - Wikipedia</li> <li>PHP Documentation</li> <li>Flask Documentation</li> </ol> <p>Este documento proporciona una visi\u00f3n general de las arquitecturas web y los lenguajes de programaci\u00f3n m\u00e1s utilizados en la actualidad, con \u00e9nfasis en PHP.</p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/","title":"UD 1 1","text":""},{"location":"1%20arquitecturas-sem1/UD_1_1/#ud1-arquitecturas-web","title":"UD1- Arquitecturas WEB","text":"RA1 Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias <p>Criterios de Evaluaci\u00f3n</p> <ul> <li>A Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>B Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>C Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>D Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>E Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>F Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>G Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#1-introduccion","title":"1 Introducci\u00f3n","text":"<p>La web ha evolucionado significativamente desde sus inicios, transformando la manera en que interactuamos en l\u00ednea. Un breve resumen de su historia podr\u00eda ser:</p> <p>El nacimiento de la World Wide Web</p> <p>En 1989, Tim Berners-Lee, un cient\u00edfico del CERN en Suiza, propuso un sistema de hipertexto para compartir informaci\u00f3n entre investigadores. Este sistema dio lugar a la creaci\u00f3n de la World Wide Web^1^. En 1991, Berners-Lee lanz\u00f3 el primer navegador web, llamado WorldWideWeb, y desarroll\u00f3 HTML, el lenguaje de marcado que se convirti\u00f3 en la base de la programaci\u00f3n web^1^.</p> <p>HTML y el surgimiento de la programaci\u00f3n web</p> <p>HTML permiti\u00f3 a los desarrolladores crear y organizar contenido en l\u00ednea utilizando etiquetas y atributos. La r\u00e1pida adopci\u00f3n de la web llev\u00f3 a una mayor demanda de contenido en l\u00ednea y al surgimiento de la programaci\u00f3n web^1^.</p> <p>La Web 2.0</p> <p>En 2004, el t\u00e9rmino Web 2.0 fue acu\u00f1ado para describir la evoluci\u00f3n hacia aplicaciones web interactivas. Esta fase se caracteriz\u00f3 por la interactividad, la colaboraci\u00f3n y la participaci\u00f3n de los usuarios en la creaci\u00f3n de contenido^1^. JavaScript y AJAX jugaron un papel crucial en esta evoluci\u00f3n, permitiendo la actualizaci\u00f3n din\u00e1mica del contenido sin recargar la p\u00e1gina completa^1^.</p> <p>CSS y el dise\u00f1o web</p> <p>Con la necesidad de crear p\u00e1ginas web visualmente atractivas, surgi\u00f3 CSS, un lenguaje que permite a los desarrolladores dar estilo a las p\u00e1ginas web. CSS mejor\u00f3 la experiencia del usuario al permitir dise\u00f1os m\u00e1s complejos y estilizados^1^.</p> <p>El presente y el futuro</p> <p>Hoy en d\u00eda, la programaci\u00f3n web sigue evolucionando con nuevas tecnolog\u00edas y frameworks que facilitan el desarrollo de aplicaciones web avanzadas.La programaci\u00f3n web ha pasado de ser una herramienta b\u00e1sica para compartir informaci\u00f3n a una plataforma compleja y din\u00e1mica que soporta aplicaciones de alta gama.</p> <p>Comenzaremos esta unidad repasando algunos conceptos importantes en relaci\u00f3n a las aplicaciones Web:</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#11-caracteristicas-de-la-programacion-web","title":"1.1 Caracter\u00edsticas de la programaci\u00f3n web.","text":"<p>Cuando una p\u00e1gina web se descarga a tu ordenador, su contenido define qu\u00e9 se debe mostrar en pantalla. Este contenido est\u00e1 programado en un lenguaje de marcado, formado por etiquetas, que puede ser HTML o XHTML. Las etiquetas que componen la p\u00e1gina indican el objetivo de cada una de las partes que la componen. As\u00ed, dentro de estos lenguajes hay etiquetas para indicar que un texto es un encabezado, que forma parte de una tabla, o que simplemente es un p\u00e1rrafo de texto. Adem\u00e1s, si la p\u00e1gina est\u00e1 bien estructurada, la informaci\u00f3n que le indica al navegador el estilo con que se debe mostrar cada parte de la p\u00e1gina estar\u00e1 almacenado en otro fichero, una hoja de estilos o CSS. La hoja de estilos se encuentra indicada en la p\u00e1gina web y el navegador la descarga junto a \u00e9sta. En ella nos podemos encontrar, por ejemplo, estilos que indican que el encabezado debe ir con tipo de letra Arial y en color rojo, o que los p\u00e1rrafos deben ir alineados a la izquierda. Estos dos ficheros se descargan a tu ordenador desde un servidor web como respuesta a una petici\u00f3n.Los pasos son los siguientes:</p> <p>Tu ordenador solicita a un servidor web una p\u00e1gina con extensi\u00f3n .htm, .html o .xhtml.</p> <p>El servidor busca esa p\u00e1gina en un almac\u00e9n de p\u00e1ginas (cada una suele ser un fichero).</p> <p>Si el servidor encuentra esa p\u00e1gina, la recupera.</p> <p>Y por \u00faltimo se la env\u00eda al navegador para que \u00e9ste pueda mostrar su contenido. Este es un ejemplo t\u00edpico de una comunicaci\u00f3n cliente-servidor. El cliente es el que hace la petici\u00f3n e inicia la comunicaci\u00f3n, y el servidor es el que recibe la petici\u00f3n y la atiende. En nuestro caso, el navegador es el cliente web</p> <p>Este es un ejemplo t\u00edpico de una comunicaci\u00f3n cliente-servidor. El cliente es el que hace la petici\u00f3n e inicia la comunicaci\u00f3n, y el servidor es el que recibe la petici\u00f3n y la atiende. En nuestro caso, el navegador es el cliente web</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#actividad-1","title":"Actividad 1","text":"<p>Busca en la web W3C algunos ejemplos de por qu\u00e9 su uso</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#2-arquitecturas-web","title":"2 Arquitecturas Web","text":""},{"location":"1%20arquitecturas-sem1/UD_1_1/#21-modelo-cliente-servidor","title":"2.1 Modelo Cliente Servidor","text":"<p>Una de las arquitecturas de software m\u00e1s utilizadas en inform\u00e1tica es la llamada arquitectura cliente / servidor . En este tipo de arquitectura hay una aplicaci\u00f3n que hace peticiones (el cliente ) y otra aplicaci\u00f3n que est\u00e1 a la espera de recibir esas peticiones y, cuando las recibe, procesarlas y responder (el servidor ).</p> <p>Ejemplos de esta arquitectura son los servidores NTP (Network Time Protocol), a los cuales se le pide la hora actual para sincronizarse, los servidores FTP (File Transfer Protocol), a los que se les puede enviar y pedir archivos, o precisamente los servidores HTTP , que son los encargados de servir las p\u00e1ginas web.</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#22-paginas-web-estaticas-dinamicas","title":"2.2 P\u00e1ginas Web Est\u00e1ticas / Din\u00e1micas","text":"<p>Las p\u00e1ginas que viste en el ejemplo anterior se llaman p\u00e1ginas web est\u00e1ticas . Estas p\u00e1ginas se encuentran almacenadas en su forma definitiva , tal y como se crearon, y su contenido no var\u00eda. Son \u00fatiles para mostrar una informaci\u00f3n concreta, y mostrar\u00e1n esa misma informaci\u00f3n cada vez que se carguen. La \u00fanica forma en que pueden cambiar es si un programador la modifica y actualiza su contenido.</p> <p>En contraposici\u00f3n a las p\u00e1ginas web est\u00e1ticas, como ya te imaginar\u00e1s, existen las p\u00e1ginas web din\u00e1micas . Estas p\u00e1ginas, como su nombre indica, se caracterizan porque su contenido cambia en funci\u00f3n de diversas variables, como puede ser el navegador que est\u00e1s usando, el usuario con el que te has identificado, o las acciones que has efectuado con anterioridad.</p> <p>Dentro de las p\u00e1ginas web din\u00e1micas , es muy importante distinguir dos tipos :</p> <ul> <li>Aquellas que incluyen c\u00f3digo que ejecuta el navegador .   En estas p\u00e1ginas el c\u00f3digo ejecutable, normalmente en lenguaje JavaScript ,   se incluye dentro del HTML (o XHTML) y se descarga junto con la p\u00e1gina.   Cuando el navegador muestra la p\u00e1gina en pantalla, ejecuta el c\u00f3digo que   la acompa\u00f1a. Este c\u00f3digo puede incorporar m\u00faltiples funcionalidades que pueden ir desde mostrar animaciones   hasta cambiar totalmente la apariencia y el contenido de la p\u00e1gina.   En este m\u00f3dulo no vamos a ver JavaScript, salvo cuando \u00e9ste se   relaciona con la programaci\u00f3n web del lado del servidor.</li> <li>Como ya sabes, hay muchas p\u00e1ginas en Internet   que no tienen extensi\u00f3n .htm, .html o .xhtml . Muchas de estas p\u00e1ginas tienen extensiones como .php, .asp, .jsp,   .cgi o .aspx. En \u00e9stas, el contenido que se descarga al   navegador es similar al de una p\u00e1gina web est\u00e1tica: HTML (o XHTML). Lo que   cambia es la forma en que se obtiene ese contenido. Al contrario de lo que   vimos hasta ahora, esas p\u00e1ginas no est\u00e1n almacenadas en el servidor; m\u00e1s   concretamente, el contenido que se almacena no es el mismo que despu\u00e9s se   env\u00eda al navegador. El HTML de estas p\u00e1ginas se forma como resultado de la ejecuci\u00f3n de un programa , y esa ejecuci\u00f3n tiene lugar   en el servidor web (aunque no necesariamente por ese mismo servidor).</li> </ul> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#video-explicacion","title":"V\u00eddeo explicaci\u00f3n","text":""},{"location":"1%20arquitecturas-sem1/UD_1_1/#23-arquitecturas-y-lenguajes","title":"2.3 Arquitecturas y lenguajes","text":"<p>Una de las primeras decisiones que tendr\u00e1s que tomar al programar una aplicaci\u00f3n web es la arquitectura que vas a utilizar y la que se adec\u00faa m\u00e1s a tu proyecto por distintas razones. Tenemos un sinf\u00edn de alternativas, podemos nombrar algunas de ellas como son:</p> <p></p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#24-decisiones-de-diseno","title":"2.4 Decisiones de dise\u00f1o","text":"<p>Para tomar la decisi\u00f3n del punto anterior, es muy importante tener en cuenta diferentes aspectos en cuanto a decisiones de dise\u00f1o, como pueden ser:</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#3-arquitectura-de-3-capas-y-modelo-mvc","title":"3 Arquitectura de 3 capas y modelo MVC","text":""},{"location":"1%20arquitecturas-sem1/UD_1_1/#31-ejecucion-de-codigo-en-el-servidor-y-en-el-cliente","title":"3.1 Ejecuci\u00f3n de c\u00f3digo en el Servidor y en el Cliente","text":"<p>Como vimos, cuando tu navegador solicita a un servidor web una p\u00e1gina, es posible que antes de envi\u00e1rtela haya tenido que ejecutar, por s\u00ed mismo o por delegaci\u00f3n, alg\u00fan programa para obtenerla. Ese programa es el que genera, en parte o en su totalidad, la p\u00e1gina web que llega a tu equipo. En estos casos, el c\u00f3digo se ejecuta en el entorno del servidor web .</p> <p>Adem\u00e1s, cuando una p\u00e1gina web llega a tu navegador, es tambi\u00e9n posible que incluya alg\u00fan programa o fragmentos de c\u00f3digo que se deban ejecutar. Ese c\u00f3digo, normalmente en lenguaje JavaScript, se ejecutar\u00e1 en tu navegador y, adem\u00e1s de poder modificar el contenido de la p\u00e1gina, tambi\u00e9n puede llevar a cabo acciones como la animaci\u00f3n de textos u objetos de la p\u00e1gina o la comprobaci\u00f3n de los datos que introduces en un formulario.</p> <p>Estas dos tecnolog\u00edas se complementan una conotra. As\u00ed, volviendo al ejemplo del correo web:</p> <ul> <li>el programa que se encarga de obtener tus mensajes y su contenido de una base de datos se ejecuta   en el entorno del servidor ,</li> <li>mientras que tu navegador ejecuta, por ejemplo, el c\u00f3digo encargado de avisarte cuando quieres enviar un mensaje y te has olvidado de poner un texto en el asunto.</li> <li>desde hace unos a\u00f1os existe una t\u00e9cnica de desarrollo web conocida como AJAX , que nos posibilita realizar programas en los que el c\u00f3digo JavaScript que se ejecuta en el navegador pueda comunicarse con un servidor de Internet para obtener informaci\u00f3n con la que, por ejemplo, modificar la p\u00e1gina web actual.</li> </ul>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#actividad-2","title":"Actividad 2","text":"<p>Actividad 2</p> <pre><code>A\u00f1ade a tu repositorio de seguimiento alg\u00fan **enlace de Youtube** que explique este modelo y haz un **comentario con tus palabras** al respecto\n</code></pre>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#32-arquitectura-de-3-capas","title":"3.2 Arquitectura de 3 capas","text":"<p>Antes de hablar de cada una de estas capas tenemos que distinguir entre capas f\u00edsicas (tier ) y capas l\u00f3gicas (layer ).</p> <p>Tier (nivel/escal\u00f3n)</p> <p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier ):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de bases de datos</li> </ul> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#33-cluster-en-tiers-del-modelo-3-capas","title":"3.3 Cluster en tiers del modelo 3 capas","text":"<p>No debemos confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p> <p>En una aplicaci\u00f3n puedes distinguir, de forma general, **funciones de presentaci\u00f3n ** (se encarga de dar formato a los datos para present\u00e1rselo al usuario final), **l\u00f3gica ** (utiliza los datos para ejecutar un proceso y obtener un resultado), **persistencia ** (que mantiene los datos almacenados de forma organizada) y **acceso ** (que obtiene e introduce datos en el espacio de almacenamiento).</p> <p>Cada capa puede ocuparse de una o varias de las funciones anteriores. Por ejemplo, en las aplicaciones de **3capas ** nos podemos encontrar con:</p> <ul> <li>Una capa cliente , que es donde programar\u00e1s todo lo relacionado con la interface de usuario,   esto es, la parte visible de la aplicaci\u00f3n con la que interactuar\u00e1 el usuario.</li> <li>Una **capa intermedia ** donde deber\u00e1s programar la funcionalidad de tu aplicaci\u00f3n.</li> <li>Una capa de acceso a datos , que se tendr\u00e1 que encargar de almacenar la informaci\u00f3n   de la aplicaci\u00f3n en una base de datos y recuperarla cuando sea necesario.</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> <p></p> <p>As\u00ed, en la siguiente figura tambi\u00e9n se representan los aspectos generales de estas tres capas.</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#actividad-3-capas-de-presentacion-aplicacion-y-datos","title":"Actividad 3 Capas de presentaci\u00f3n, aplicaci\u00f3n y datos","text":"<p>Busca alguna imagen en internet de este modelo de 3 capas y com\u00e9ntala brevemente en repositorio, debatiremos en clase las capturas que hemos encontrado.</p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#34-mvc-modelo-vista-controlador","title":"3.4 MVC: Modelo Vista Controlador","text":"<p>Model-View-Controller** o Modelo-Vista-** Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo : representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador : Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista : Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP</p> <p></p>"},{"location":"1%20arquitecturas-sem1/UD_1_1/#referencias","title":"Referencias","text":"<p>https://escuelainformatica.es/blog/historia-de-la-programacion-web</p> <p>https://www.arquitecturajava.com/arquitecturas-web-y-su-evolucion/</p>"},{"location":"1%20arquitecturas-sem1/ejercicios/test/","title":"Test","text":"<pre><code>const copyMe = true\n&lt;?php\n    $nombre = \"Juan\";\n    $edad = 30;\n    echo \"Hola, mi nombre es \" . $nombre . \" y tengo \" . $edad . \" a\u00f1os.\";\n\n    function test() {\n  console.log(\"notice the blank line before this function?\");\n}\n?&gt;\n</code></pre> <p><code>javascript copy const copyMe = true</code></p>"},{"location":"2%20Lenguaje%20PHP/Semana%202/2_UD_2_sem1/","title":"UD 2 El lenguaje PHP","text":"<p>Probando</p> <p>Hola esto es una nota</p> <p>Phasellus posuere in sem ut cursus</p>"},{"location":"2%20Lenguaje%20PHP/Semana%202/2_UD_2_sem1/#4-instalacion-del-entorno-php","title":"4 Instalaci\u00f3n del entorno PHP","text":""},{"location":"2%20Lenguaje%20PHP/Semana%202/2_UD_2_sem1/#ahora-aqui-viene-otro-titulo","title":"Ahora aqu\u00ed viene otro t\u00edtulo","text":""},{"location":"2%20Lenguaje%20PHP/Semana%202/semana2/","title":"Semana2","text":"<p>Por completar</p>"},{"location":"2%20Lenguaje%20PHP/Semana%203/Por%20Completar/","title":"Por Completar","text":"<p>Por completar</p>"}]}