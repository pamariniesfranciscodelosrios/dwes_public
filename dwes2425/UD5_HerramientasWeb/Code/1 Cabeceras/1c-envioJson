## UD5 Envío de información JSON



Es posible enviar y recibir información en formato JSON en PHP sin utilizar JavaScript, utilizando simplemente un formulario HTML y PHP para procesar los datos enviados. En este caso, el formulario HTML enviará los datos a PHP como una solicitud `POST` y PHP manejará los datos en formato JSON directamente. A continuación te muestro cómo hacerlo.

### **1. Formulario HTML (index.html)**

Este formulario HTML permite al usuario enviar información, pero no utiliza JavaScript. En su lugar, los datos se enviarán como parámetros `POST` y serán procesados en el servidor con PHP.

```html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Enviar Datos en JSON sin JavaScript</title>
</head>
<body>
    <h1>Formulario para Enviar Datos en JSON</h1>
    <form action="procesar.php" method="POST">
        <label for="nombre">Nombre:</label>
        <input type="text" id="nombre" name="nombre" required><br><br>

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <input type="submit" value="Enviar">
    </form>
</body>
</html>
```

### **2. Archivo PHP para procesar la solicitud (procesar.php)**

Este archivo PHP leerá los datos enviados a través del formulario `POST`, los convertirá en formato JSON y responderá con los datos en JSON.

```php
<?php
// Verificar si se han enviado datos a través de POST
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Obtener los datos enviados a través del formulario
    $nombre = isset($_POST['nombre']) ? $_POST['nombre'] : null;
    $email = isset($_POST['email']) ? $_POST['email'] : null;

    // Comprobar si ambos campos han sido enviados
    if ($nombre && $email) {
        // Crear un array con los datos para la respuesta
        $respuesta = [
            'status' => 'success',
            'mensaje' => 'Datos recibidos correctamente.',
            'datos' => [
                'nombre' => $nombre,
                'email' => $email
            ]
        ];
    } else {
        // Responder con un error si los datos no están completos
        $respuesta = [
            'status' => 'error',
            'mensaje' => 'Faltan datos en la solicitud.'
        ];
    }

    // Establecer la cabecera Content-Type a application/json
    header('Content-Type: application/json');

    // Enviar la respuesta en formato JSON
    echo json_encode($respuesta);
}
?>
```

### **Explicación del Código:**

1. **Formulario HTML**:

   - El formulario utiliza el método `POST` para enviar los datos al archivo `procesar.php`.
   - Los campos `nombre` y `email` se envían como parámetros `POST`.
2. **PHP (procesar.php)**:

   - Cuando el formulario es enviado, PHP obtiene los datos utilizando `$_POST['nombre']` y `$_POST['email']`.
   - Si ambos campos son recibidos correctamente, PHP prepara una respuesta en formato JSON utilizando `json_encode()`.
   - La respuesta se envía con la cabecera `Content-Type: application/json`, lo que indica que la respuesta está en formato JSON.
   - Si faltan datos, la respuesta contiene un mensaje de error.

---

### **Cómo funciona:**

1. El usuario completa el formulario en `index.html` y lo envía.
2. PHP recibe los datos en `procesar.php`, procesa la información y responde con los datos en formato JSON.
3. El navegador recibirá la respuesta JSON, pero no habrá ninguna interfaz dinámica (como en el caso de usar JavaScript). El usuario solo verá la respuesta si la visualiza en el código fuente de la página o si el navegador la maneja en segundo plano.

Este ejemplo muestra cómo trabajar con JSON en PHP sin la necesidad de JavaScript, utilizando solo el formulario `POST` y la respuesta en formato JSON procesada por PHP.
